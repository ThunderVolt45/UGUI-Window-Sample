name: Unity-Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  buildForWindow: 
    name: Build - Windows x64
    runs-on: ubuntu-latest
    outputs:
      artifacts: ${{ steps.artifact.outputs.artifact-id }}
    steps:
      # Step1 - Check Out
      - name: Check Out
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      # Step2 - Cache Library
      - name: Cache Library
        uses: actions/cache@v4
        with: 
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-
      # Step3 - Unity Build
      - name: Unity Build
        id: build
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: StandaloneWindows64
          # 빌드 결과물 이름을 프로젝트 이름으로 설정
          buildName: ${{ github.event.repository.name }}
      # Step4 - Upload Build File Artifact
      - name: Upload Build File Artifact
        id: artifact
        uses: actions/upload-artifact@v4
        with:
          name: Build-Windows
          path: build
  releasesBuild:
    name: Automated Releases
    runs-on: ubuntu-latest
    needs: buildForWindow
    env:
      ARTIFACTS: ${{ needs.buildForWindow.outputs.artifacts }}
    steps:
      # Step1 - Download Build Artifacts
      - name: Download Build File Artifacts
        id: artifact
        uses: actions/download-artifact@v5
        with:
          artifacts-ids: ${{ env.ARTIFACTS }}
          path: artifacts/
      # Step2 - Check File Structure
      - name: Display structure of downloaded files
        run: ls -R artifacts/
      # Step3 - Bump version and push tag
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      # Step4 - Create Release
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          name: Automatically Generated Release ${{ steps.tag_version.outputs.new_tag }}
          body:  |
            ${{ steps.tag_version.outputs.changelog }}

            Automated release created by Github Actions.
          draft: false
          prerelease: false
      # Step5 - Upload Build file to Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/Build-Windows.zip
          asset_name: ${{ github.event.repository.name }}-${{ github.ref }}-Windows64.zip
          asset_content_type: application/zip
